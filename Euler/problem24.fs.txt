
// permutations of [0; 1] in lexicographic order
// 1: [0, 1]
// 2: [1, 0]

// permutations of [0; 1; 2] in lexicographic order
// 1: [0, 1, 2]
// 2: [0, 2, 1]
// 3: [1, 0, 2]
// 4: [1, 2, 0]
// 5: [2, 0, 1]
// 6: [2, 1, 0]

// permute(prefix, suffix):
// if suffix length is 0, yield prefix
// otherwise, for symbol found in suffix, in increasing order:
//   permute (prefix @ symbol) (suffix - symbol)
// the "suffix - symbol" can be done with list.filter

// to choose item #n in lexicographic ordering of set s
// observe that there are factorial(size(s)) permutations
// 

let rec fact x =
    match x with
    | 1 -> 1
    | _ -> x * (fact (x - 1))

let rec nthPermutationOf set n =
    let permCount = List.length set

    if permCount = 1 then
        set
    else
        let numberOfPermutationsAtNextLevel = (fact (permCount - 1)) 

        let index = n / numberOfPermutationsAtNextLevel

        let head = List.nth set index

        let filteredList = set |> List.filter (fun x -> x <> head)

        head :: (nthPermutationOf filteredList (n % numberOfPermutationsAtNextLevel))
    

[<EntryPoint>]
let main argv = 
    printfn "%A" (nthPermutationOf [0..9] 999999)

    0