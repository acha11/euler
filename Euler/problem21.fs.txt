let rec increment x =
    match x with
    | head :: tail when head < 9 ->
        head + 1 :: tail
    | head :: tail when head = 9 ->
        0 :: increment tail
    | [] -> [1]


let rec multiplyBigNumByDigit bigNum digit carry =
    match bigNum with
    | head :: tail ->
        let product = head * digit + carry
        let thisDigit = product % 10
        let nextCarry = product / 10
        thisDigit :: multiplyBigNumByDigit tail digit nextCarry
    | [] when carry = 0 -> []
    | [] -> [carry]

let folder (result, carry) (u, v) =
    let sum = u + v + carry
    let emittedDigit = sum % 10
    let resultingCarry = sum / 10

    (emittedDigit, resultingCarry)

let addBigNumsOfEqualLength (x: int list) (y: int list) carry =
    // Add padded zeroes so we have somewhere for the carry to go
    let xPadded = x @ [0]
    let yPadded = y @ [0]

    Seq.zip xPadded yPadded
    |> Seq.scan folder (0, carry)
    |> Seq.skip(1)
    |> Seq.map (fun (u, v) -> u)
    |> Seq.toList
    |> List.rev
    |> Seq.skipWhile(fun z -> z = 0)
    |> Seq.toList
    |> List.rev

let listOfZeroes length =
    [1..length] |> Seq.map(fun _ -> 0) |> Seq.toList

let addBigNums (x: int list) (y: int list) =
    // First of all, make the two bignums have equal number of digits by sticking 0s in front of the shorter one.
    let xIsShorter = x.Length < y.Length

    let zeroes = listOfZeroes (System.Math.Abs(y.Length - x.Length))
    
    let paddedX = 
        if xIsShorter then 
            x @ zeroes
        else
            x

    let paddedY =
        if not xIsShorter then
            y @ zeroes
        else
            y

    addBigNumsOfEqualLength paddedX paddedY 0

let multiplyBigNums (x: int list) (y: int list) =
    let elements = 
        y
        |> Seq.mapi (fun index digit -> (listOfZeroes index) @ (multiplyBigNumByDigit x digit 0) )
        |> Seq.toList

    let result =
        elements
        |> Seq.reduce (fun x y -> addBigNums x y)
        |> Seq.toList

    result

let bigNumToString bigNum =
    let a =
        bigNum
        |> Seq.toList
        |> List.rev
        |> List.map (fun x -> x.ToString().Chars(0))
    
    new System.String(List.toArray(a))

let rec intToBigNum i state =
    match i with
    | x when x > 9 -> intToBigNum (x / 10) (state @  [x % 10])
    | x -> state @ [x]

[<EntryPoint>]
let main argv = 
    let x = 
        [1..100]
        |> Seq.map (fun x -> intToBigNum x [])
        |> Seq.toList

    let y = [1]

    let fact = Seq.fold (fun u v -> multiplyBigNums u v) y x

    printfn "100! = %A" (bigNumToString fact)

    let sumOfDigits = fact |> Seq.sum

    printfn "sum of digits in 100! = %A" sumOfDigits